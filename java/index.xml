<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javas on Sonor</title>
    <link>https://xiaoshigoodboy.github.io/java/</link>
    <description>Recent content in Javas on Sonor</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 03 Mar 2020 10:54:28 +0800</lastBuildDate>
    
	<atom:link href="https://xiaoshigoodboy.github.io/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>java面向对象</title>
      <link>https://xiaoshigoodboy.github.io/java/javaoo/</link>
      <pubDate>Tue, 03 Mar 2020 10:54:28 +0800</pubDate>
      
      <guid>https://xiaoshigoodboy.github.io/java/javaoo/</guid>
      <description>java面向对象 Java 继承  继承的概念 继承是java面向对象编程技术的一块基石，因为它允许创建分等级层次的类。
继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。
生活中的继承： 兔子和羊属于食草动物类，狮子和豹属于食肉动物类。
食草动物和食肉动物又是属于动物类。
所以继承需要符合的关系是：is-a，父类更通用，子类更具体。
虽然食草动物和食肉动物都是属于动物，但是两者的属性和行为上有差别，所以子类会具有父类的一般特性也会具有自身的特性。
类的继承格式 在 Java 中通过 extends 关键字可以申明一个类是从另外一个类继承而来的，一般形式如下：
类的继承格式 class 父类 { } class 子类 extends 父类 { }
为什么需要继承 接下来我们通过实例来说明这个需求。
开发动物类，其中动物分别为企鹅以及老鼠，要求如下：
 企鹅：属性（姓名，id），方法（吃，睡，自我介绍） 老鼠：属性（姓名，id），方法（吃，睡，自我介绍）  企鹅类： public class Penguin { private String name; private int id; public Penguin(String myName, int myid) { name = myName; id = myid; } public void eat(){ System.out.println(name+&amp;#34;正在吃&amp;#34;); } public void sleep(){ System.out.println(name+&amp;#34;正在睡&amp;#34;); } public void introduction() { System.</description>
    </item>
    
    <item>
      <title>Java基础</title>
      <link>https://xiaoshigoodboy.github.io/java/basic/</link>
      <pubDate>Tue, 03 Mar 2020 10:03:58 +0800</pubDate>
      
      <guid>https://xiaoshigoodboy.github.io/java/basic/</guid>
      <description>基础知识  一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。下面简要介绍下类、对象、方法和实例变量的概念。 对象：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；
行为有：摇尾巴、叫、吃等。 类：类是一个模板，它描述一类对象的行为和状态。
方法：方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。
实例变量：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。
 Java作为一种面向对象语言。支持以下基本概念：   多态
  继承
  封装
  抽象
  类
  对象
  实例
  方法
  重载
  对象和类的概念。  对象：对象是类的一个实例（对象不是找个女朋友），有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。 类：类是一个模板，它描述一类对象的行为和状态。  类的定义 public class Dog{ String breed; int age; String color; void barking(){ } void hungry(){ } void sleeping(){ } } 一个类可以包含以下类型变量：  局部变量：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。 成员变量：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。 类变量：类变量也声明在类中，方法体之外，但必须声明为static类型。 一个类可以拥有多个方法，在上面的例子中：barking()、hungry()和sleeping()都是Dog类的方法。  构造方法 每个类都有构造方法。如果没有显式地为类定义构造方法，Java编译器将会为该类提供一个默认构造方法。在创建一个对象的时候，至少要调用一个构造方法。构造方法的名称必须与类同名，一个类可以有多个构造方法。</description>
    </item>
    
  </channel>
</rss>