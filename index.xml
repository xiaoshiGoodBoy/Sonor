<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sonor</title>
    <link>https://xiaoshigoodboy.github.io/</link>
    <description>Recent content on Sonor</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 16 Nov 2020 12:48:51 +0800</lastBuildDate>
    
	<atom:link href="https://xiaoshigoodboy.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux_tmux</title>
      <link>https://xiaoshigoodboy.github.io/other/linux_tmux/</link>
      <pubDate>Mon, 16 Nov 2020 12:48:51 +0800</pubDate>
      
      <guid>https://xiaoshigoodboy.github.io/other/linux_tmux/</guid>
      <description>Linux tmux 一、Tmux 是什么？ 1.1 会话与进程 命令行的典型使用方式是，打开一个终端窗口（terminal window，以下简称&amp;quot;窗口&amp;rdquo;），在里面输入命令。用户与计算机的这种临时的交互，称为一次&amp;quot;会话&amp;rdquo;（session） 。
会话的一个重要特点是，窗口与其中启动的进程是连在一起的。打开窗口，会话开始；关闭窗口，会话结束，会话内部的进程也会随之终止，不管有没有运行完。
一个典型的例子就是，SSH 登录远程计算机，打开一个远程窗口执行命令。这时，网络突然断线，再次登录的时候，是找不回上一次执行的命令的。因为上一次 SSH 会话已经终止了，里面的进程也随之消失了。
为了解决这个问题，会话与窗口可以&amp;quot;解绑&amp;rdquo;：窗口关闭时，会话并不终止，而是继续运行，等到以后需要的时候，再让会话&amp;quot;绑定&amp;quot;其他窗口。
1.2 Tmux 的作用 Tmux 就是会话与窗口的&amp;quot;解绑&amp;quot;工具，将它们彻底分离。
（1）它允许在单个窗口中，同时访问多个会话。这对于同时运行多个命令行程序很有用。
（2） 它可以让新窗口&amp;quot;接入&amp;quot;已经存在的会话。
（3）它允许每个会话有多个连接窗口，因此可以多人实时共享会话。
（4）它还支持窗口任意的垂直和水平拆分。
类似的终端复用器还有 GNU Screen。Tmux 与它功能相似，但是更易用，也更强大。
二、基本用法 2.1 安装 Tmux 一般需要自己安装。
# Ubuntu 或 Debian $sudo apt-get install tmux # CentOS 或 Fedora $ sudo yum install tmux # MAC 安装 $ brew install tmux 2.2 启动与退出 安装完成后，键入tmux命令，就进入了Tmux窗口
$ tmux 上面命令会启动Tmux窗口，底部有一个状态栏。状态栏的左侧是窗口信息（编号和名称），右侧是系统信息。
按下Ctrl+d 或者显示输入exit命令，就可以退出Tmux窗口。
$ exit 2.3 前缀键 Tmux 窗口有大量的快捷键。所有快捷键都要通过前缀键唤起。默认的前缀键是Ctrl+b，即先按下Ctrl+b，快捷键才会生效。</description>
    </item>
    
    <item>
      <title>Druid数据库配置信息加密</title>
      <link>https://xiaoshigoodboy.github.io/java/druidencode/</link>
      <pubDate>Sat, 15 Aug 2020 09:04:58 +0800</pubDate>
      
      <guid>https://xiaoshigoodboy.github.io/java/druidencode/</guid>
      <description>1、阿里默认只对用户密码解密 2、druid 1.0.16版本及以上的解密时需要同时配置publicKey 一.生成密文密码
1 前提:已经配置了jdk环境
1.1准备jar包
1、(示例使用 druid-0.2.23.jar),放到某目录下,且打开命令窗口(win用户可以在目录的空白处 shift+鼠标右键 打开命令窗口); 1.2.输入命令:
java -cp druid-0.2.23.jar com.alibaba.druid.filter.config.ConfigTools you_password 我要加密的密码是:123456pwd
注意：druid 1.0.16之前
java -cp druid-0.2.23.jar com.alibaba.druid.filter.config.ConfigTools 123456pwd 1.0.16jar包执行之后返回值， 1.0.16.jar包之前只返回加密后的密码
privateKey:MIIBUwIBADANBgkqhkiG9w0BAQEFAASCAT0wggE5AgEAAkEAmddjmfldLAXQXTqDv/Eff sT2j2Lmy1ka7J1ErKBjBPWotXR8lhD+TuJqDwvB96+bTDuGFWdcx5awTfx4+3NoCwIDAQABAkBbbSoAQ 7Yfh4UBItlRpNb22887/6bxio75t60selTeiMNJC/jeT36PpxHva/hXegXusYHstpArKvFBCczKswPBA iEA2cDvPmz77eyKeaUIMCUH8UfYAUyfKDJiWRREsyn/OmMCIQC03LSOC5S0Ddu6UPIWXJ30DJhpvfkaC xnqP1m3VAt4OQIgJW0DsbcJldsR8dZrkdrLgqzWc2K3+DCwtp7FMAYH2AECIACRiQfBRZBjUsN9KaWkW OLBf2Eltbi9PDGeTVvkKb0RAiAqKLLxRWfD5e1G5FDhSIUh46ef1kFSYECoRSZO8on5mg== publicKey:MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAJnXY5n5XSwF0F06g7/xH37E9o9i5stZGuydRK ygYwT1qLV0fJYQ/k7iag8Lwfevm0w7hhVnXMeWsE38ePtzaAsCAwEAAQ== password:A95WOJh8yz6T2ONfFu3lIhdVG1QpyuIeyyUpjJWWL/5QssN0WFK+T3hQgt8dtf30Gg+Wbz3 wQcLQ1h7WlK4feQ== 二、dataSource配置 注意：druid 1.0.16之前
1.1jdbc.properties
## JDBC set jdbc.url=jdbc\:mysql\://localhost\:3306/edu_demo?useUnicode\=true&amp;amp;characterEncoding\=utf-8 jdbc.username=root jdbc.password=Obsbr4gd1oVyYr+k4KQdUMNYgKMWdDibsNJTabnph+yPmxjc6tUrT1GNsPDqa9ZvTF9QvaRD86H+Zn/H+yz2jA\ 1.2dataSource配置
&amp;lt;!-- 基于Druid数据库链接池的数据源配置 --&amp;gt; &amp;lt;bean id=&amp;#34;dataSource&amp;#34; class=&amp;#34;com.alibaba.druid.pool.DruidDataSource&amp;#34; init-method=&amp;#34;init&amp;#34; destroy-method=&amp;#34;close&amp;#34;&amp;gt; &amp;lt;!-- 基本属性driverClassName、 url、user、password --&amp;gt; &amp;lt;property name=&amp;#34;driverClassName&amp;#34; value=&amp;#34;com.mysql.jdbc.Driver&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;url&amp;#34; value=&amp;#34;${jdbc.url}&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;username&amp;#34; value=&amp;#34;${jdbc.</description>
    </item>
    
    <item>
      <title>Linux</title>
      <link>https://xiaoshigoodboy.github.io/other/linux/</link>
      <pubDate>Fri, 22 May 2020 11:13:18 +0800</pubDate>
      
      <guid>https://xiaoshigoodboy.github.io/other/linux/</guid>
      <description>linux 创建桌面图标 文件名: idea.desktop
[Desktop Entry] Type=Application Terminal=false Name=Navicat//应用名 Categories=Development; // 应用分类 Icon=/opt/work/ide/navicat/navicat.png //应用图标的绝对路径 Exec=/opt/work/ide/navicat/start_navicat //应用的绝对路径 开启ssh，对外开放 打开ssh连接 sudo systemctl start sshd // 停止ssh sudo systemctl stop sshd // 查看ssh状态 sudo systemctl status sshd // 关闭开机启动 sudo systemctl disable sshd 常用命令 -- 问postgresql文件在哪个位置 whereis postgresql -- 查看文件路径 sudo find / -name &amp;#34;postgresql.conf&amp;#34; -- 查看端口是否存在 netstat -anp|grep 6789 - nc指令进行tcp通讯 nc ip地址 -- nc执行upd通讯 -4u -6u nc -4u ip地址 -- 根据关键字从历史命令查询 history | grep &amp;#34;ssh -fCNR&amp;#34; -- 根据行号执行代码历史 -- 执行630行代码 !</description>
    </item>
    
    <item>
      <title>Other</title>
      <link>https://xiaoshigoodboy.github.io/other/other/</link>
      <pubDate>Fri, 24 Apr 2020 16:57:51 +0800</pubDate>
      
      <guid>https://xiaoshigoodboy.github.io/other/other/</guid>
      <description>JavaScript 导出Excel , Word // 前台请求方式，可以直接跳转下载word、excel window.location.href = &amp;#34;history_systemAction?startTime=&amp;#34; + start + &amp;#34;&amp;amp;endTime=&amp;#34; +end; // 后台处理文件流 // ssh框架 response.setContentType(&amp;#34;octets/stream&amp;#34;); response.addHeader(&amp;#34;Content-Disposition&amp;#34;,&amp;#34;attachment;filename=historyWord.docx&amp;#34;); OutputStream out = response.getOutputStream(); // poi进行表格封装 XWPFDocument document = new XWPFDocument(); // 新建一个段落, 作用: word中插入多个表格使用，防止表格放到一起 XWPFParagraph p = document.createParagraph(); XWPFTable table = document.createTable(); // 设置表格样式 CTTblWidth width = table.getCTTbl().addNewTblPr().addNewTblW(); width.setType(STTblWidth.DXA); width.setW(BigInteger.valueOf(5000)); // 获取表格的第一行 XWPFTableRow tableRowOne = table.getRow(0); // 参数 i: 当前行的第几个单元格 s: 赋值 tableRowOne.getCell(i++).setText(s) // 关闭流 document.write(out); out.close(); out.flush(); 打印功能 // 前台页面 // 参数val: String类型的html代码 $.</description>
    </item>
    
    <item>
      <title>javascript</title>
      <link>https://xiaoshigoodboy.github.io/other/js/</link>
      <pubDate>Sat, 11 Apr 2020 10:11:58 +0800</pubDate>
      
      <guid>https://xiaoshigoodboy.github.io/other/js/</guid>
      <description>JavaScript 导出Excel , Word // 前台请求方式，可以直接跳转下载word、excel window.location.href = &amp;#34;history_systemAction?startTime=&amp;#34; + start + &amp;#34;&amp;amp;endTime=&amp;#34; +end; // 后台处理文件流 // ssh框架 response.setContentType(&amp;#34;octets/stream&amp;#34;); response.addHeader(&amp;#34;Content-Disposition&amp;#34;,&amp;#34;attachment;filename=historyWord.docx&amp;#34;); OutputStream out = response.getOutputStream(); // poi进行表格封装 XWPFDocument document = new XWPFDocument(); // 新建一个段落, 作用: word中插入多个表格使用，防止表格放到一起 XWPFParagraph p = document.createParagraph(); XWPFTable table = document.createTable(); // 设置表格样式 CTTblWidth width = table.getCTTbl().addNewTblPr().addNewTblW(); width.setType(STTblWidth.DXA); width.setW(BigInteger.valueOf(5000)); // 获取表格的第一行 XWPFTableRow tableRowOne = table.getRow(0); // 参数 i: 当前行的第几个单元格 s: 赋值 tableRowOne.getCell(i++).setText(s) // 关闭流 document.write(out); out.close(); out.flush(); 打印功能 // 前台页面 // 参数val: String类型的html代码 $.</description>
    </item>
    
    <item>
      <title>数据库</title>
      <link>https://xiaoshigoodboy.github.io/other/database/</link>
      <pubDate>Sat, 11 Apr 2020 09:07:02 +0800</pubDate>
      
      <guid>https://xiaoshigoodboy.github.io/other/database/</guid>
      <description>PostgreSql 存储过程 create or replace function loopData4() RETURNS integer AS $$ declare v_index integer :=1000; begin while v_index &amp;lt;1081 loop v_index = v_index + 1; insert into tab_sensor (id, kind,state,mark,name,zkbh,address1,address2,addressb,bzuobiao,czuobiao,angle,alarmvalue,values1,notalarmvalue,jiazhichushi,programid,maxy,miny,damheight,scale,scalenum,imgurl ) values (v_index,&amp;#39;拉线传感器&amp;#39;,&amp;#39;ZB&amp;#39;,&amp;#39;坝体表面位移&amp;#39;,&amp;#39;DB&amp;#39;, 1, 1, &amp;#39;88540.0|16319.0|180|16.47&amp;#39;,10,&amp;#39;&amp;#39;,&amp;#39;&amp;#39;,1.0,&amp;#39;0.06|1|2&amp;#39;,&amp;#39;0&amp;#39;,&amp;#39;10.0.0.159&amp;#39;,&amp;#39;&amp;#39;,2,183.0,159.0,180.0,2.0,13.0,&amp;#39;/images/uploadImg/10_1485141083056.jpg&amp;#39;); end loop; return 1; end; $$ LANGUAGE plpgsql; select loopData4(); // 满足条件部分修改 create or replace function data1() RETURNS integer AS $$ declare rec integer; begin for rec in EXECUTE &amp;#39;select id from (select id, cast(split_part(cast(value2 as varchar),&amp;#39;&amp;#39;.</description>
    </item>
    
    <item>
      <title>Shiro</title>
      <link>https://xiaoshigoodboy.github.io/java/shiro/</link>
      <pubDate>Fri, 13 Mar 2020 17:20:09 +0800</pubDate>
      
      <guid>https://xiaoshigoodboy.github.io/java/shiro/</guid>
      <description>Shiro 一.shiro的各个组件 Authentication :身份认证/登录,验证用户是不是拥有相应的身份;
Authorization :授权,即权限验证,验证某个已认证的用户是否拥有某个权限;即判断用户是否能进行什么操作,如:验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限;
Session Manager :会话管理,即用户登录后就是一-次会话,在没有退出之前,它的所有信息都在会话中;会话可以是普通JavaSE环境,也可以是Web环境的;
Cryptography :加密,保护数据的安全性,如密码加密存储到数据库,而不是明文存储;Web Support : Web支持,可以非常容易的集成到Web环境;
Caching :缓存,比如用户登录后,其用户信息、拥有的角色/权限不必每次去查,这样可以提高效率;
Concurrency : Shiro支持多线程应用的并发验证,即如在一个线程中开启另一 个线程,能把权限自动传播过去;
Testing :提供测试支持;
Run As :允许-个用户假装为另一个用户(如果他们允许)的身份进行访问
Remember Me :记住我,这个是非常常见的功能,即一次登录后,下次再来的话不用登录了
二.系统架构 Subject :应用代码直接交互的对象是Subject ,也就是说Shiro的对外API核心就是Subject。Subject 代表了当前“用户”， 这个用户不一定是一个具体的人,与当前应用交互的任何东西都是Subject ,如网络爬虫,机器人等;
SecurityManager ;Subject其实是一个门面, SecurityManager才是实际的执行者;SecurityManager :安全管理器;即所有与安全有关的操作都会与其相关
SecurityManager交互;且其管理着所有Subject ;可以看出它是Shiro的核心,它负责与Shiro的其他组件进行交互,它相当于 SpringMVC中DispatcherServlet的角色
Realm : Shiro从Realm获取安全数据(如用户、角色、权限) , 就是说SecurityManager要验证用户身份,那么它需要从Realm获取相应的用户进行比较以确定用户身份是否合法;也需要从Realm得到用户相应的角色/权限进行验证用户是否能进行操作;可以把Realm看成DataSource
三.拦截ShiroFilter   [urls]部分的配置,其格式是: &amp;ldquo;url=拦截器[参数] ,拦截器[参数]”;如果当前请求的url匹配[urls]部分的某个url模式,将会执行其配置的拦截器。 anon ( anonymous )拦截器表示匿名访问(即不需要登录即可访问) authc ( authentication )拦截器表示需要身份认证通过后才能访问
  url模式使用Ant风格: 模式Ant路径通配符支持?、*、**,注意通配符匹配不包括目录分隔符&amp;rdquo;/”:
​ -?:匹配一个字符,如/admin?将匹配/admin1,但不匹配/admin或/admin/ ;
   :匹配零个或多个字符串,如/admin将匹配/admin、/admin123 ,但不匹配/admin/1 ; _** .</description>
    </item>
    
    <item>
      <title>SpringSecurity</title>
      <link>https://xiaoshigoodboy.github.io/java/springsecurity/</link>
      <pubDate>Wed, 04 Mar 2020 17:15:51 +0800</pubDate>
      
      <guid>https://xiaoshigoodboy.github.io/java/springsecurity/</guid>
      <description>Spring Security 环境准备 工具idea，框架使用springboot
依赖包：
spring Security 主要依赖包
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 根据自己情况，选择数据库，这里使用的是pg数据库
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.postgresql&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;postgresql&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;42.2.8&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; dao层操作如何使用注解方式，需要引入：
注意：dao层注解式开发，需要注意依赖包，如果引入错误会出现@Autowired注入失败，会有运行时异常，但是也不影响正常使用，具体为啥，嗯&amp;hellip;&amp;hellip;.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.mybatis.spring.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mybatis-spring-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.3.1&amp;lt; &amp;lt;/dependency&amp;gt; </description>
    </item>
    
    <item>
      <title>java面向对象</title>
      <link>https://xiaoshigoodboy.github.io/java/javaoo/</link>
      <pubDate>Tue, 03 Mar 2020 10:54:28 +0800</pubDate>
      
      <guid>https://xiaoshigoodboy.github.io/java/javaoo/</guid>
      <description>java面向对象 Java 继承  继承的概念 继承是java面向对象编程技术的一块基石，因为它允许创建分等级层次的类。
继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。
生活中的继承： 兔子和羊属于食草动物类，狮子和豹属于食肉动物类。
食草动物和食肉动物又是属于动物类。
所以继承需要符合的关系是：is-a，父类更通用，子类更具体。
虽然食草动物和食肉动物都是属于动物，但是两者的属性和行为上有差别，所以子类会具有父类的一般特性也会具有自身的特性。
类的继承格式 在 Java 中通过 extends 关键字可以申明一个类是从另外一个类继承而来的，一般形式如下：
类的继承格式 class 父类 { } class 子类 extends 父类 { }
为什么需要继承 接下来我们通过实例来说明这个需求。
开发动物类，其中动物分别为企鹅以及老鼠，要求如下：
 企鹅：属性（姓名，id），方法（吃，睡，自我介绍） 老鼠：属性（姓名，id），方法（吃，睡，自我介绍）  企鹅类： public class Penguin { private String name; private int id; public Penguin(String myName, int myid) { name = myName; id = myid; } public void eat(){ System.out.println(name+&amp;#34;正在吃&amp;#34;); } public void sleep(){ System.out.println(name+&amp;#34;正在睡&amp;#34;); } public void introduction() { System.</description>
    </item>
    
    <item>
      <title>Java基础</title>
      <link>https://xiaoshigoodboy.github.io/java/basic/</link>
      <pubDate>Tue, 03 Mar 2020 10:03:58 +0800</pubDate>
      
      <guid>https://xiaoshigoodboy.github.io/java/basic/</guid>
      <description>基础知识  一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。下面简要介绍下类、对象、方法和实例变量的概念。 对象：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；
行为有：摇尾巴、叫、吃等。 类：类是一个模板，它描述一类对象的行为和状态。
方法：方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。
实例变量：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。
 Java作为一种面向对象语言。支持以下基本概念：   多态
  继承
  封装
  抽象
  类
  对象
  实例
  方法
  重载
  对象和类的概念。  对象：对象是类的一个实例（对象不是找个女朋友），有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。 类：类是一个模板，它描述一类对象的行为和状态。  类的定义 public class Dog{ String breed; int age; String color; void barking(){ } void hungry(){ } void sleeping(){ } } 一个类可以包含以下类型变量：  局部变量：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。 成员变量：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。 类变量：类变量也声明在类中，方法体之外，但必须声明为static类型。 一个类可以拥有多个方法，在上面的例子中：barking()、hungry()和sleeping()都是Dog类的方法。  构造方法 每个类都有构造方法。如果没有显式地为类定义构造方法，Java编译器将会为该类提供一个默认构造方法。在创建一个对象的时候，至少要调用一个构造方法。构造方法的名称必须与类同名，一个类可以有多个构造方法。</description>
    </item>
    
  </channel>
</rss>