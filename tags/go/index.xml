<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on Sonor</title>
    <link>https://xiaoshigoodboy.github.io/tags/go/</link>
    <description>Recent content in go on Sonor</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 16 Nov 2020 17:38:51 +0800</lastBuildDate>
    
	<atom:link href="https://xiaoshigoodboy.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go_Markfile</title>
      <link>https://xiaoshigoodboy.github.io/go/go_markfile/</link>
      <pubDate>Mon, 16 Nov 2020 17:38:51 +0800</pubDate>
      
      <guid>https://xiaoshigoodboy.github.io/go/go_markfile/</guid>
      <description>Go使用Makefile构建 Makefile介绍 Makefile 是和 make 命令一起配合使用的。它是开源的构建工具，很多大型项目的编译都是通过 Makefile 来组织的。 Makefile 主要的 5个部分 (显示规则, 隐晦规则, 变量定义, 文件指示, 注释) Makefile基本格式如下:
target ... : prerequisites ... command ... ... 其中, target - 目标文件, 可以是 Object File, 也可以是可执行文件 prerequisites - 生成 target 所需要的文件或者目标 command - make需要执行的命令 (任意的shell命令), Makefile中的命令必须以 [tab] 开头 (1)显示规则: 说明如何生成一个或多个目标文件(包括 生成的文件, 文件的依赖文件, 生成的命令) (2)隐晦规则: make的自动推导功能所执行的规则 (3)变量定义: Makefile中定义的变量 (4)文件指示: Makefile中引用其他Makefile; 指定Makefile中有效部分; 定义一个多行命令 (5)注释: Makefile只有行注释 &amp;ldquo;#&amp;quot;, 如果要使用或者输出&amp;rdquo;#&amp;ldquo;字符, 需要进行转义, &amp;ldquo;#&amp;rdquo;
 go语言内嵌Makefile构建工具 在Golang开发过程中，为了减少不断重复手动执行命令的操作，我们可以用makefile来实现“自动化编译”。它就像一个shell脚本一样，告诉机器如何编译。我们只需要一个make命令即可搞定编译的问题，极大的提高软件开发的效率。
工作方式 在默认方式下，我们只要输入make命令，那么make会在当前目录下寻找名字叫“Makefile”或“makefile”的文件，然后根据文件中的依赖关系，链接对应文件。它会一层又一层的去找文件的依赖关系，直到最终编译出第一个目标文件。在找寻的过程中，如果出现错误，比如最后被依赖的文件找不到，那么make就会直接退出。具体步骤如下：
1. 读入所有的Makefile 2.</description>
    </item>
    
  </channel>
</rss>