<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on Sonor</title>
    <link>https://xiaoshigoodboy.github.io/tags/java/</link>
    <description>Recent content in java on Sonor</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 13 Mar 2020 17:20:09 +0800</lastBuildDate>
    
	<atom:link href="https://xiaoshigoodboy.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Shiro</title>
      <link>https://xiaoshigoodboy.github.io/java/shiro/</link>
      <pubDate>Fri, 13 Mar 2020 17:20:09 +0800</pubDate>
      
      <guid>https://xiaoshigoodboy.github.io/java/shiro/</guid>
      <description>Shiro 一.shiro的各个组件 Authentication :身份认证/登录,验证用户是不是拥有相应的身份;
Authorization :授权,即权限验证,验证某个已认证的用户是否拥有某个权限;即判断用户是否能进行什么操作,如:验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限;
Session Manager :会话管理,即用户登录后就是一-次会话,在没有退出之前,它的所有信息都在会话中;会话可以是普通JavaSE环境,也可以是Web环境的;
Cryptography :加密,保护数据的安全性,如密码加密存储到数据库,而不是明文存储;Web Support : Web支持,可以非常容易的集成到Web环境;
Caching :缓存,比如用户登录后,其用户信息、拥有的角色/权限不必每次去查,这样可以提高效率;
Concurrency : Shiro支持多线程应用的并发验证,即如在一个线程中开启另一 个线程,能把权限自动传播过去;
Testing :提供测试支持;
Run As :允许-个用户假装为另一个用户(如果他们允许)的身份进行访问
Remember Me :记住我,这个是非常常见的功能,即一次登录后,下次再来的话不用登录了
二.系统架构 Subject :应用代码直接交互的对象是Subject ,也就是说Shiro的对外API核心就是Subject。Subject 代表了当前“用户”， 这个用户不一定是一个具体的人,与当前应用交互的任何东西都是Subject ,如网络爬虫,机器人等;
SecurityManager ;Subject其实是一个门面, SecurityManager才是实际的执行者;SecurityManager :安全管理器;即所有与安全有关的操作都会与其相关
SecurityManager交互;且其管理着所有Subject ;可以看出它是Shiro的核心,它负责与Shiro的其他组件进行交互,它相当于 SpringMVC中DispatcherServlet的角色
Realm : Shiro从Realm获取安全数据(如用户、角色、权限) , 就是说SecurityManager要验证用户身份,那么它需要从Realm获取相应的用户进行比较以确定用户身份是否合法;也需要从Realm得到用户相应的角色/权限进行验证用户是否能进行操作;可以把Realm看成DataSource
三.拦截ShiroFilter   [urls]部分的配置,其格式是: &amp;ldquo;url=拦截器[参数] ,拦截器[参数]”;如果当前请求的url匹配[urls]部分的某个url模式,将会执行其配置的拦截器。 anon ( anonymous )拦截器表示匿名访问(即不需要登录即可访问) authc ( authentication )拦截器表示需要身份认证通过后才能访问
  url模式使用Ant风格: 模式Ant路径通配符支持?、*、**,注意通配符匹配不包括目录分隔符&amp;rdquo;/”:
​ -?:匹配一个字符,如/admin?将匹配/admin1,但不匹配/admin或/admin/ ;
   :匹配零个或多个字符串,如/admin将匹配/admin、/admin123 ,但不匹配/admin/1 ; _** .</description>
    </item>
    
    <item>
      <title>SpringSecurity</title>
      <link>https://xiaoshigoodboy.github.io/java/springsecurity/</link>
      <pubDate>Wed, 04 Mar 2020 17:15:51 +0800</pubDate>
      
      <guid>https://xiaoshigoodboy.github.io/java/springsecurity/</guid>
      <description>Spring Security 环境准备 工具idea，框架使用springboot
依赖包：
spring Security 主要依赖包
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 根据自己情况，选择数据库，这里使用的是pg数据库
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.postgresql&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;postgresql&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;42.2.8&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; dao层操作如何使用注解方式，需要引入：
注意：dao层注解式开发，需要注意依赖包，如果引入错误会出现@Autowired注入失败，会有运行时异常，但是也不影响正常使用，具体为啥，嗯&amp;hellip;&amp;hellip;.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.mybatis.spring.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mybatis-spring-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.3.1&amp;lt; &amp;lt;/dependency&amp;gt; </description>
    </item>
    
    <item>
      <title>java面向对象</title>
      <link>https://xiaoshigoodboy.github.io/java/javaoo/</link>
      <pubDate>Tue, 03 Mar 2020 10:54:28 +0800</pubDate>
      
      <guid>https://xiaoshigoodboy.github.io/java/javaoo/</guid>
      <description>java面向对象 Java 继承  继承的概念 继承是java面向对象编程技术的一块基石，因为它允许创建分等级层次的类。
继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。
生活中的继承： 兔子和羊属于食草动物类，狮子和豹属于食肉动物类。
食草动物和食肉动物又是属于动物类。
所以继承需要符合的关系是：is-a，父类更通用，子类更具体。
虽然食草动物和食肉动物都是属于动物，但是两者的属性和行为上有差别，所以子类会具有父类的一般特性也会具有自身的特性。
类的继承格式 在 Java 中通过 extends 关键字可以申明一个类是从另外一个类继承而来的，一般形式如下：
类的继承格式 class 父类 { } class 子类 extends 父类 { }
为什么需要继承 接下来我们通过实例来说明这个需求。
开发动物类，其中动物分别为企鹅以及老鼠，要求如下：
 企鹅：属性（姓名，id），方法（吃，睡，自我介绍） 老鼠：属性（姓名，id），方法（吃，睡，自我介绍）  企鹅类： public class Penguin { private String name; private int id; public Penguin(String myName, int myid) { name = myName; id = myid; } public void eat(){ System.out.println(name+&amp;#34;正在吃&amp;#34;); } public void sleep(){ System.out.println(name+&amp;#34;正在睡&amp;#34;); } public void introduction() { System.</description>
    </item>
    
    <item>
      <title>Java基础</title>
      <link>https://xiaoshigoodboy.github.io/java/basic/</link>
      <pubDate>Tue, 03 Mar 2020 10:03:58 +0800</pubDate>
      
      <guid>https://xiaoshigoodboy.github.io/java/basic/</guid>
      <description>基础知识  一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。下面简要介绍下类、对象、方法和实例变量的概念。 对象：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；
行为有：摇尾巴、叫、吃等。 类：类是一个模板，它描述一类对象的行为和状态。
方法：方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。
实例变量：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。
 Java作为一种面向对象语言。支持以下基本概念：   多态
  继承
  封装
  抽象
  类
  对象
  实例
  方法
  重载
  对象和类的概念。  对象：对象是类的一个实例（对象不是找个女朋友），有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。 类：类是一个模板，它描述一类对象的行为和状态。  类的定义 public class Dog{ String breed; int age; String color; void barking(){ } void hungry(){ } void sleeping(){ } } 一个类可以包含以下类型变量：  局部变量：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。 成员变量：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。 类变量：类变量也声明在类中，方法体之外，但必须声明为static类型。 一个类可以拥有多个方法，在上面的例子中：barking()、hungry()和sleeping()都是Dog类的方法。  构造方法 每个类都有构造方法。如果没有显式地为类定义构造方法，Java编译器将会为该类提供一个默认构造方法。在创建一个对象的时候，至少要调用一个构造方法。构造方法的名称必须与类同名，一个类可以有多个构造方法。</description>
    </item>
    
  </channel>
</rss>