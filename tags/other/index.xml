<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>other on Sonor</title>
    <link>https://xiaoshigoodboy.github.io/tags/other/</link>
    <description>Recent content in other on Sonor</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 16 Nov 2020 12:48:51 +0800</lastBuildDate>
    
	<atom:link href="https://xiaoshigoodboy.github.io/tags/other/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux_tmux</title>
      <link>https://xiaoshigoodboy.github.io/other/linux_tmux/</link>
      <pubDate>Mon, 16 Nov 2020 12:48:51 +0800</pubDate>
      
      <guid>https://xiaoshigoodboy.github.io/other/linux_tmux/</guid>
      <description>Linux tmux 一、Tmux 是什么？ 1.1 会话与进程 命令行的典型使用方式是，打开一个终端窗口（terminal window，以下简称&amp;quot;窗口&amp;rdquo;），在里面输入命令。用户与计算机的这种临时的交互，称为一次&amp;quot;会话&amp;rdquo;（session） 。
会话的一个重要特点是，窗口与其中启动的进程是连在一起的。打开窗口，会话开始；关闭窗口，会话结束，会话内部的进程也会随之终止，不管有没有运行完。
一个典型的例子就是，SSH 登录远程计算机，打开一个远程窗口执行命令。这时，网络突然断线，再次登录的时候，是找不回上一次执行的命令的。因为上一次 SSH 会话已经终止了，里面的进程也随之消失了。
为了解决这个问题，会话与窗口可以&amp;quot;解绑&amp;rdquo;：窗口关闭时，会话并不终止，而是继续运行，等到以后需要的时候，再让会话&amp;quot;绑定&amp;quot;其他窗口。
1.2 Tmux 的作用 Tmux 就是会话与窗口的&amp;quot;解绑&amp;quot;工具，将它们彻底分离。
（1）它允许在单个窗口中，同时访问多个会话。这对于同时运行多个命令行程序很有用。
（2） 它可以让新窗口&amp;quot;接入&amp;quot;已经存在的会话。
（3）它允许每个会话有多个连接窗口，因此可以多人实时共享会话。
（4）它还支持窗口任意的垂直和水平拆分。
类似的终端复用器还有 GNU Screen。Tmux 与它功能相似，但是更易用，也更强大。
二、基本用法 2.1 安装 Tmux 一般需要自己安装。
# Ubuntu 或 Debian $sudo apt-get install tmux # CentOS 或 Fedora $ sudo yum install tmux # MAC 安装 $ brew install tmux 2.2 启动与退出 安装完成后，键入tmux命令，就进入了Tmux窗口
$ tmux 上面命令会启动Tmux窗口，底部有一个状态栏。状态栏的左侧是窗口信息（编号和名称），右侧是系统信息。
按下Ctrl+d 或者显示输入exit命令，就可以退出Tmux窗口。
$ exit 2.3 前缀键 Tmux 窗口有大量的快捷键。所有快捷键都要通过前缀键唤起。默认的前缀键是Ctrl+b，即先按下Ctrl+b，快捷键才会生效。</description>
    </item>
    
    <item>
      <title>Linux</title>
      <link>https://xiaoshigoodboy.github.io/other/linux/</link>
      <pubDate>Fri, 22 May 2020 11:13:18 +0800</pubDate>
      
      <guid>https://xiaoshigoodboy.github.io/other/linux/</guid>
      <description>linux 创建桌面图标 文件名: idea.desktop
[Desktop Entry] Type=Application Terminal=false Name=Navicat//应用名 Categories=Development; // 应用分类 Icon=/opt/work/ide/navicat/navicat.png //应用图标的绝对路径 Exec=/opt/work/ide/navicat/start_navicat //应用的绝对路径 开启ssh，对外开放 打开ssh连接 sudo systemctl start sshd // 停止ssh sudo systemctl stop sshd // 查看ssh状态 sudo systemctl status sshd // 关闭开机启动 sudo systemctl disable sshd 常用命令 -- 问postgresql文件在哪个位置 whereis postgresql -- 查看文件路径 sudo find / -name &amp;#34;postgresql.conf&amp;#34; -- 查看端口是否存在 netstat -anp|grep 6789 - nc指令进行tcp通讯 nc ip地址 -- nc执行upd通讯 -4u -6u nc -4u ip地址 -- 根据关键字从历史命令查询 history | grep &amp;#34;ssh -fCNR&amp;#34; -- 根据行号执行代码历史 -- 执行630行代码 !</description>
    </item>
    
    <item>
      <title>Other</title>
      <link>https://xiaoshigoodboy.github.io/other/other/</link>
      <pubDate>Fri, 24 Apr 2020 16:57:51 +0800</pubDate>
      
      <guid>https://xiaoshigoodboy.github.io/other/other/</guid>
      <description>JavaScript 导出Excel , Word // 前台请求方式，可以直接跳转下载word、excel window.location.href = &amp;#34;history_systemAction?startTime=&amp;#34; + start + &amp;#34;&amp;amp;endTime=&amp;#34; +end; // 后台处理文件流 // ssh框架 response.setContentType(&amp;#34;octets/stream&amp;#34;); response.addHeader(&amp;#34;Content-Disposition&amp;#34;,&amp;#34;attachment;filename=historyWord.docx&amp;#34;); OutputStream out = response.getOutputStream(); // poi进行表格封装 XWPFDocument document = new XWPFDocument(); // 新建一个段落, 作用: word中插入多个表格使用，防止表格放到一起 XWPFParagraph p = document.createParagraph(); XWPFTable table = document.createTable(); // 设置表格样式 CTTblWidth width = table.getCTTbl().addNewTblPr().addNewTblW(); width.setType(STTblWidth.DXA); width.setW(BigInteger.valueOf(5000)); // 获取表格的第一行 XWPFTableRow tableRowOne = table.getRow(0); // 参数 i: 当前行的第几个单元格 s: 赋值 tableRowOne.getCell(i++).setText(s) // 关闭流 document.write(out); out.close(); out.flush(); 打印功能 // 前台页面 // 参数val: String类型的html代码 $.</description>
    </item>
    
    <item>
      <title>javascript</title>
      <link>https://xiaoshigoodboy.github.io/other/js/</link>
      <pubDate>Sat, 11 Apr 2020 10:11:58 +0800</pubDate>
      
      <guid>https://xiaoshigoodboy.github.io/other/js/</guid>
      <description>JavaScript 导出Excel , Word // 前台请求方式，可以直接跳转下载word、excel window.location.href = &amp;#34;history_systemAction?startTime=&amp;#34; + start + &amp;#34;&amp;amp;endTime=&amp;#34; +end; // 后台处理文件流 // ssh框架 response.setContentType(&amp;#34;octets/stream&amp;#34;); response.addHeader(&amp;#34;Content-Disposition&amp;#34;,&amp;#34;attachment;filename=historyWord.docx&amp;#34;); OutputStream out = response.getOutputStream(); // poi进行表格封装 XWPFDocument document = new XWPFDocument(); // 新建一个段落, 作用: word中插入多个表格使用，防止表格放到一起 XWPFParagraph p = document.createParagraph(); XWPFTable table = document.createTable(); // 设置表格样式 CTTblWidth width = table.getCTTbl().addNewTblPr().addNewTblW(); width.setType(STTblWidth.DXA); width.setW(BigInteger.valueOf(5000)); // 获取表格的第一行 XWPFTableRow tableRowOne = table.getRow(0); // 参数 i: 当前行的第几个单元格 s: 赋值 tableRowOne.getCell(i++).setText(s) // 关闭流 document.write(out); out.close(); out.flush(); 打印功能 // 前台页面 // 参数val: String类型的html代码 $.</description>
    </item>
    
    <item>
      <title>数据库</title>
      <link>https://xiaoshigoodboy.github.io/other/database/</link>
      <pubDate>Sat, 11 Apr 2020 09:07:02 +0800</pubDate>
      
      <guid>https://xiaoshigoodboy.github.io/other/database/</guid>
      <description>PostgreSql 存储过程 create or replace function loopData4() RETURNS integer AS $$ declare v_index integer :=1000; begin while v_index &amp;lt;1081 loop v_index = v_index + 1; insert into tab_sensor (id, kind,state,mark,name,zkbh,address1,address2,addressb,bzuobiao,czuobiao,angle,alarmvalue,values1,notalarmvalue,jiazhichushi,programid,maxy,miny,damheight,scale,scalenum,imgurl ) values (v_index,&amp;#39;拉线传感器&amp;#39;,&amp;#39;ZB&amp;#39;,&amp;#39;坝体表面位移&amp;#39;,&amp;#39;DB&amp;#39;, 1, 1, &amp;#39;88540.0|16319.0|180|16.47&amp;#39;,10,&amp;#39;&amp;#39;,&amp;#39;&amp;#39;,1.0,&amp;#39;0.06|1|2&amp;#39;,&amp;#39;0&amp;#39;,&amp;#39;10.0.0.159&amp;#39;,&amp;#39;&amp;#39;,2,183.0,159.0,180.0,2.0,13.0,&amp;#39;/images/uploadImg/10_1485141083056.jpg&amp;#39;); end loop; return 1; end; $$ LANGUAGE plpgsql; select loopData4(); // 满足条件部分修改 create or replace function data1() RETURNS integer AS $$ declare rec integer; begin for rec in EXECUTE &amp;#39;select id from (select id, cast(split_part(cast(value2 as varchar),&amp;#39;&amp;#39;.</description>
    </item>
    
  </channel>
</rss>